void moveWithCollisions(dynamicBodiesVector, staticBodiesVector, frameTime)
{
	detectInitialCollisions(dynamicBodiesVector, staticBodiesVector, frameTime)			(2)
	while (!this->collisionsQueue.empty())
	{
		collision = processFirstCollision()							(4)
		detectAfterCollisions(dynamicBodiesVector, staticBodiesVector, collision)		(5)		
	}
}

(2)
void detectInitialCollisions(const dynamicBodiesVector, const staticBodiesVector, const frameTime)1
{
	for dynamicBody in dynamicBodiesVector 
	{
		collision = null
		for otherDynamic = dynamicBody+1 in dynamicBodiesVector
		{
			newCollision = detectDynamicDynamicCollision(dynamicBody, otherDynamic)
			compareAndEmplaceCollision(newCollision, &collision)				(3)
		}
		for staticBody in staticBodiesVector
		{
			newCollision = detectDynamicStaticCollision(dynamicBody, staticBody)
			compareAndEmplaceCollision(newCollision, &collision)
		}
		this->collisionsQueue.insert(collision)
		insertCollision(collision)									(6)
	}
}

(3)
void compareAndEmplaceCollision(newCollision, &collision){
	if (newcollision)
	{
		if (collision == null or newCollision.time < collision.time)
			collision = newCollision
	}
}

(4)
collision processFirstCollision()
{
	collision = collisionsQueue.pop()
	collision.body1.move(collision.time)
	collision.body2.move(collision.time)

	collision.body1.onCollision(body2)
	collision.body2.onCollision(body1)

	mirrorMovementDirection(const collision)
	
	return collision
}


(5)
void detectAfterCollisions(dynamicBodiesVector, staticBodiesVector, collision)
{
	body1 = collision.body1
	body2 = collision.body2
	
	collision1 = null;
	collision2 = null;
	for (otherDynamic in dynamicBodiesVector)
	{
		if (otherDynamic == body1 or otherDynamic == body2)
			continue

		newcollision = detectDynamicDynamicCollision(collision.body1, dynamicBody)
		compareAndEmplaceCollision(newCollision, &collision1)
		if (body2.isDynamic)
		{
			newcollision = detectDynamicDynamicCollision(collision.body2, dynamicBody)
			compareAndEmplaceCollision(newCollision, &collision2)
		}
	}

	for (staticBody in staticBodiesVector)
	{
		if (staticBody == body2)
			continue

		newcollision = detectDynamicStaticCollision(body1, staticBody)
		compareAndEmplaceCollision(newCollision, &collision1)
		if (body2.isDynamic)
		{
			newcollision = detextDynamicStaticCollision(body2, staticBody)
			compareAndEmplaceCollision(newcollision, &collision2)
		}
	}
}


void insertCollision(collision)
{
	this->collisionsQueue.insert(collision)
	...
}
